import requests

def check_url_status_requests(url):
    """
    Checks the HTTP status code of a given URL using requests, mimicking a browser request.

    Args:
        url (str): The URL to check.

    Returns:
        int: The HTTP status code, or None if an error occurred.
    """
    # Define headers to mimic a common browser
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Connection': 'keep-alive',
    }

    print(f"Checking URL: {url} using requests...")

    try:
        # Make a GET request to the URL with specified headers
        response = requests.get(url, headers=headers, timeout=10) # Added a timeout for safety
        status_code = response.status_code

        print(f"Received Status Code: {status_code}")

        if status_code == 200:
            print("Status: 200 OK - The request was successful.")
        elif status_code == 503:
            print("Status: 503 Service Unavailable - The server is currently unable to handle the request.")
            print("This matches the error observed in the browser.")
        else:
            print(f"Status: {status_code} - An unexpected status code was received.")

        return status_code

    except requests.exceptions.RequestException as e:
        print(f"An error occurred while trying to connect to {url}: {e}")
        return None
    except Exception as e:
        # Handle any other unexpected errors
        print(f"An unexpected error occurred for {url}: {e}")
        return None

# --- Example Usage ---
if __name__ == "__main__":
    # Replace with the actual URL you are testing
    test_url = "YOUR_APPLICATION_URL_HERE" # <<<--- IMPORTANT: Replace with your URL

    check_url_status_requests(test_url)
